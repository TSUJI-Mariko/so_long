MinilibX: une petite liblairie faite maison qui va nous permettre d'ouvrir des fenêtre à l'écran et de faire des jolis dessins à l'interieur.
man /usr/share/man/man3/mlx.1 

dans le man:
-> description de MinilibX
-> Comment est-ce qu'elle fonctionne,
-> description de l'include a mettre dans mon programme
-> description de la primiere fonction absolument insdespensable qui nous connexte au server du Linux: mlx_init();

4 autre man:
-mlx_new_window : gestion de la fenetre
-mlx_pixel_put : de quelle facon on peut dessiner a l'interieur d'une fenetre 
-mlx_new_image : manupulation des images
-mlx_loop : un boucle d'evenements et sur les problematiques d'evenements

de quelle facon on peut complier mon MinilibX sur linux.

Man new_window : 
-> qui va me deteiller les parametres a utiliser 
-> mlx_new_window et ses consoeurs (meme types) va me demander 

void * mlx_new_window ( void *mlx_ptr, int size_x, int size_y, char *title );
-> mlx_ptr = l'identifiant de la connection au serveur graphique
-> size_x = la taille en pixels pour largeur et la hauteur de ma fenetre
-> size_y = la taille en pixels pour largeur et la hauteur de ma fenetre
-> title = titre de la fenetre
-> void * = pour me permettre d'avoir un identifiant sur la fenetre qui vient d'etre cree.

Avec la MinilibX on peut ouvrir plusieurs fenetres en meme temps = il faut pouvoir les differencier!
mlx_new_window nous renvoie l'identifiant de la nouvelle fenetre 

Une fois qu'on va initialiser la connection et creer la fenetre, on ne peut pas s'arreter = sinon le programme va sortir, on ne s'affiche rien!

Man mlx_loop:
int mlx_loop ( void *mlx_ptr );

Cette fonction va demander a Linux d'une part de dessiner ce qu'on lui avais demander de dessiner
= d'une part ouvrir la fnetre qu'on a demande. Cette fonction va aussi etre en charge de gerer des evenements
= Lorsque dans notre fenetre l'utilisateur bouge la souris, clique avec la souris ou utilise le clavier. 
    Il faut que mon programme puisse recuperer  ces infos( Cela s'apelle des evenements).

Cette fonction va etre en charge de gerer ces evenements et de redonner la main a mon propre programme lorsque ces evenements surviennent.

Man  mlx pixel put:
-> mlx pixel put va utiliser l'identifiant de :
-  la connection, 
-  de la fenetre, 
-  des coordonnees du pixel 
-  et la couleur du pixel qui est stockee sur un int en RGB avec un octet pour le rouge, un pour le vert un pour le bleu.

Il faut chercher des tutos sur la facon dont laquelle les couleurs sont stockees dans la memoire graphique de la machine.
 int mlx_pixel_put ( void *mlx_ptr, void *win_ptr, int x, int y, int color );

